{
  "name": "express3-handlebars",
  "description": "A Handlebars view engine for Express which doesn't suck.",
  "version": "0.5.0",
  "homepage": "https://github.com/ericf/express3-handlebars",
  "keywords": [
    "express",
    "express3",
    "handlebars",
    "view",
    "layout",
    "partials"
  ],
  "author": {
    "name": "Eric Ferraiuolo",
    "email": "eferraiuolo@gmail.com",
    "url": "http://ericf.me/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ericf/express3-handlebars.git"
  },
  "bugs": {
    "url": "https://github.com/ericf/express3-handlebars/issues"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "async": "~0.2",
    "glob": "3.x",
    "handlebars": "1.x",
    "semver": "2.x"
  },
  "devDependencies": {
    "express": "3.x"
  },
  "main": "index.js",
  "directories": {
    "lib": "./lib"
  },
  "readme": "Express3 Handlebars\n===================\n\nA [Handlebars][] view engine for [Express][] which doesn't suck.\n\n[![Dependency Status](https://david-dm.org/ericf/express3-handlebars.png)][status]\n\n\n[Express]: https://github.com/visionmedia/express\n[Handlebars]: https://github.com/wycats/handlebars.js\n[status]: https://david-dm.org/ericf/express3-handlebars\n\n\nGoals & Design\n--------------\n\nI created this project out of frustration with the existing Handlebars view\nengines for Express. As of version 3.x, Express got out of the business of being\na generic view engine — this was a great decision — leaving developers to\nimplement the concepts of layouts, partials, and doing file I/O for their\ntemplate engines of choice.\n\n### Goals and Features\n\nAfter building a half-dozen Express apps, I developed requirements and opinions\nabout what a Handlebars view engine should provide and how it should be\nimplemented. The following is that list:\n\n* Add back the concept of \"layout\", which was removed in Express 3.x.\n\n* Add back the concept of \"partials\" via Handlebars' partials mechanism.\n\n* Support a directory of partials; e.g., `{{> foo/bar}}` which exists on the\n  file system at `views/partials/foo/bar.handlebars` by default.\n\n* Smart file system I/O and template caching. When in development, templates are\n  always loaded from disk. In production, raw files and compiled templates are\n  cached, including partials.\n\n* All async and non-blocking. File system I/O is slow and servers should not be\n  blocked from handling requests while reading from disk. I/O queuing is used to\n  avoid doing unnecessary work.\n\n* Ability to expose precompiled templates and partials to the client, enabling\n  template sharing and reuse.\n\n* Ability to use a different Handlebars module/implementation other than the\n  Handlebars npm package.\n\n### Package Design\n\nThis package was designed to work great for both the simple and complex use\ncases. I _intentionally_ made sure the full implementation is exposed and is\neasily overrideable.\n\nThe package exports a function which can be invoked with no arguments or with a\n`config` object and it will return a function (closed over sane defaults) which\ncan be registered with an Express app. It's an engine factory function.\n\nThis exported engine factory has two properties which expose the underlying\nimplementation:\n\n* `ExpressHandlebars()`: The constructor function which holds the internal\n  implementation on its `prototype`. This produces instance objects which store\n  their configuration, `compiled` and `precompiled` templates, and expose an\n  `engine()` function which can be registered with an Express app.\n\n* `create()`: A convenience factory function for creating `ExpressHandlebars`\n  instances.\n\nAn instance-based approach is used so that multiple `ExpressHandlebars`\ninstances can be created with their own configuration, templates, partials, and\nhelpers.\n\n\nInstallation\n------------\n\nInstall using npm:\n\n```shell\n$ npm install express3-handlebars\n```\n\n\nUsage\n-----\n\nThis view engine uses sane defaults that leverage the \"Express-way\" of\nstructuring an app's views. This makes it trivial to use in basic apps:\n\n### Basic Usage\n\n**Directory Structure:**\n\n```\n.\n├── app.js\n└── views\n    ├── home.handlebars\n    └── layouts\n        └── main.handlebars\n\n2 directories, 3 files\n```\n\n**app.js:**\n\nCreates a super simple Express app which shows the basic way to register a\nHandlebars view engine using this package.\n\n```javascript\nvar express = require('express'),\n    exphbs  = require('express3-handlebars'),\n\n    app = express();\n\napp.engine('handlebars', exphbs({defaultLayout: 'main'}));\napp.set('view engine', 'handlebars');\n\napp.get('/', function (req, res) {\n    res.render('home');\n});\n\napp.listen(3000);\n```\n\n**views/layouts/main.handlebars:**\n\nThe main layout is the HTML page wrapper which can be reused for the different\nviews of the app. `{{{body}}}` is used as a placeholder for where the main\ncontent should be rendered.\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Example App</title>\n</head>\n<body>\n\n    {{{body}}}\n\n</body>\n</html>\n```\n\n**views/home.handlebars:**\n\nThe content for the app's home view which will be rendered into the layout's\n`{{{body}}}`.\n\n```html\n<h1>Example App: Home</h1>\n```\n\n#### Running the Example\n\nThe above example is bundled in this package's [examples directory][], where\nit can be run by:\n\n```shell\n$ cd examples/basic/ && node app\n```\n\n### Using Instances\n\nAnother way to use this view engine is to create an instance(s) of\n`ExpressHandlebars`, allowing access to the full API:\n\n```javascript\nvar express = require('express'),\n    exphbs  = require('express3-handlebars'),\n\n    app = express(),\n    hbs = exphbs.create({ /* config */ });\n\n// Register `hbs.engine` with the Express app.\napp.engine('handlebars', hbs.engine);\napp.set('view engine', 'handlebars');\n\n// ...still have a reference to `hbs`, on which methods like `loadPartials()`\n// can be called.\n```\n\n**Note:** The [Advanced Usage][] example demonstrates how `ExpressHandlebars`\ninstances can be leveraged.\n\n### Template Caching\n\nThis view engine uses a smart template caching strategy. In development,\ntemplates will always be loaded from disk, i.e., no caching. In production, raw\nfiles and compiled Handlebars templates are aggressively cached.\n\nThe easiest way to control template/view caching is through Express'\n[view cache setting][]:\n\n```javascript\napp.enable('view cache');\n```\n\nExpress enables this setting by default when in production mode, i.e.,\n`process.env.NODE_ENV === \"production\"`.\n\n**Note:** All of the public API methods accept `options.cache`, which gives\ncontrol over caching when calling these methods directly.\n\n### Layouts\n\nA layout is simply a Handlebars template with a `{{{body}}}` placeholder.\nUsually it will be an HTML page wrapper into which views will be rendered.\n\nThis view engine adds back the concept of \"layout\", which was removed in Express\n3.x. It can be configured with a path to the layouts directory, by default it's\nset to `\"views/layouts/\"`.\n\nThere are two ways to set a default layout: configuring the view engine's\n`defaultLayout` property, or setting [Express locals][] `app.locals.layout`.\n\nThe layout into which a view should be rendered can be overridden per-request\nby assigning a different value to the `layout` request local. The following\nwill render the \"home\" view with no layout:\n\n```javascript\napp.get('/', function (req, res, next) {\n    res.render('home', {layout: false});\n});\n```\n\n### Helpers\n\nHelper functions, or \"helpers\" are functions that can be\n[registered with Handlebars][] and can be called within a template. Helpers can\nbe used for transforming output, iterating over data, etc. To keep with the\nspirit of *logic-less* templates, helpers are the place where logic should be\ndefined.\n\nHandlebars ships with some [built-in helpers][], such as: `with`, `if`, `each`,\netc. Most application will need to extend this set of helpers to include\napp-specific logic and transformations. Beyond defining global helpers on\n`Handlebars`, this view engine supports `ExpressHandlebars` instance-level\nhelpers via the `helpers` configuration property, and render-level helpers via\n`options.helpers` when calling the `render()` and `renderView()` methods.\n\nThe following example shows helpers being specified at each level:\n\n**app.js:**\n\nCreates a super simple Express app which shows the basic way to register\n`ExpressHandlebars` instance-level helpers, and override one at the\nrender-level.\n\n```javascript\nvar express = require('express'),\n    exphbs  = require('express3-handlebars'),\n\n    app = express(),\n    hbs;\n\nhbs = exphbs.create({\n    // Specify helpers which are only registered on this instance.\n    helpers: {\n        foo: function () { return 'FOO!'; }\n        bar: function () { return 'BAR!'; }\n    }\n});\n\napp.engine('handlebars', hbs.engine);\napp.set('view engine', 'handlebars');\n\napp.get('/', function (req, res, next) {\n    res.render('home', {\n        showTitle: true,\n\n        // Override `foo` helper only for this rendering.\n        helpers: {\n            foo: function () { return 'foo.'; }\n        }\n    });\n});\n\napp.listen(3000);\n```\n\n**views/home.handlebars:**\n\nThe app's home view which uses helper functions to help render the contents.\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Example App - Home</title>\n</head>\n<body>\n\n    <!-- Uses built-in `if` helper. -->\n  {{#if showTitle}}\n    <h1>Home</h1>\n  {{/if}}\n\n    <!-- Calls `foo` helper, overridden at render-level. -->\n    <p>{{foo}}</p>\n\n    <!-- Calls `bar` helper, defined at instance-level. -->\n    <p>{{bar}}</p>\n\n</body>\n</html>\n```\n\n#### More on Helpers\n\nRefer to the [Handlebars website][] for more information on defining helpers:\n\n* [Expression Helpers][]\n* [Block Helpers][]\n\n\n[examples directory]: https://github.com/ericf/express3-handlebars/tree/master/examples\n[view cache setting]: http://expressjs.com/api.html#app-settings\n[Express locals]: http://expressjs.com/api.html#app.locals\n[registered with Handlebars]: https://github.com/wycats/handlebars.js/#registering-helpers\n[built-in helpers]: http://handlebarsjs.com/#builtins\n[Handlebars website]: http://handlebarsjs.com/\n[Expression Helpers]: http://handlebarsjs.com/expressions.html#helpers\n[Block Helpers]: http://handlebarsjs.com/block_helpers.html\n\n\nAPI\n---\n\n### Configuration and Defaults\n\nThere are two main ways to use this package: via its engine factory function, or\ncreating `ExpressHandlebars` instances; both use the same configuration\nproperties and defaults.\n\n```javascript\nvar exphbs = require('express3-handlebars');\n\n// Using the engine factory:\nexphbs({ /* config */ });\n\n// Create an instance:\nexphbs.create({ /* config */ });\n```\n\nThe following is the list of configuration properties and their default values\n(if any):\n\n#### `defaultLayout`\nThe string name or path of a template in the `layoutsDir` to use as the default\nlayout. This is overridden by a `layout` specified in the app or response\n`locals`. **Note:** A falsy value will render without a layout; e.g.,\n`res.render('home', {layout: false});`.\n\n#### `extname=\".handlebars\"`\nThe string name of the file extension used by the templates.\n\n#### `handlebars=require('handlebars')`\nThe Handlebars module/implementation. This allows for the `ExpressHandlebars`\ninstance to use a different Handlebars module/implementation than that provided\nby the Handlebars npm package.\n\n#### `helpers`\nAn object which holds the helper functions used when rendering templates with\nthis `ExpressHandlebars` instance. When rendering a template, a collection of\nhelpers will be generated by merging: `handlebars.helpers` (global), `helpers`\n(instance), and `options.helpers` (render-level). This allows Handlebars'\n`registerHelper()` function to operate as expected, will providing two extra\nlevels over helper overrides.\n\n#### `layoutsDir=\"views/layouts/\"`\nThe string path to the directory where the layout templates reside.\n\n#### `partialsDir=\"views/partials/\"`\nThe string path to the directory where the partials templates reside.\n\n### Properties\n\nThe public API properties are provided via `ExpressHandlebars` instances. In\nadditional to the properties listed in the **Configuration and Defaults**\nsection, the following are additional public properties:\n\n#### `compiled`\nAn object cache which holds compiled Handlebars template functions in the\nformat: `{\"path/to/template\": [Function]}`.\n\n#### `engine`\nA function reference to the `renderView()` method which is bound to `this`\n`ExpressHandlebars` instance. This bound function should be used when\nregistering this view engine with an Express app.\n\n#### `handlebarsVersion`\nThe version number of `handlebars` as a semver. This is unsed internally to\nbranch on certain operations which differ between Handlebars releases.\n\n#### `precompiled`\nAn object cache which holds precompiled Handlebars template strings in the\nformat: `{\"path/to/template\": [String]}`.\n\n### Methods\n\nThe following is the list of public API methods provided via `ExpressHandlebars`\ninstances:\n\n#### `loadPartials(options|callback, [callback])`\n\nRetrieves the partials in the `partialsDir` and passes an object mapping the\npartials in the form `{name: partial}` to the `callback`.\n\nBy default each partial will be a compiled Handlebars template function. Use\n`options.precompiled` to receive the partials as precompiled templates — this is\nuseful for sharing templates with client code.\n\n**Parameters:**\n\n* `[options]`: Optional object containing any of the following properties:\n\n  * `[cache]`: Whether cached templates can be used if they have already been\n    requested. This is recommended for production to avoid unnecessary file I/O.\n\n  * `[precompiled=false]`: Whether precompiled templates should be provided,\n    instead of compiled Handlebars template functions.\n\n* `callback`: Function to call once the partials are retrieved.\n\nThe name of each partial corresponds to its location in `partialsDir`. For\nexample, consider the following directory structure:\n\n```\nviews\n└── partials\n    ├── foo\n    │   └── bar.handlebars\n    └── title.handlebars\n\n2 directories, 2 files\n```\n\n`loadPartials()` would produce the following result:\n\n```javascript\nvar hbs = require('express3-handlebars').create();\n\nhbs.loadPartials(function (err, partials) {\n    console.log(partials);\n    // => { 'foo.bar': [Function],\n    // =>    title: [Function] }\n});\n```\n\n**Note:** The partial name `\"foo.bar\"` would ideally be `\"foo/bar\"`, but this is\nbeing prevented by a [Handlebars bug][]. Once this bug is fixed, a future\nversion will use a \"/\" separator. Templates requiring the partial still use:\n`{{> foo/bar}}`.\n\n#### `loadTemplate(filePath, options|callback, [callback])`\n\nRetrieves the template at the specified `filePath` and passes a compiled\nHandlebars template function to the `callback`.\n\nUse `options.precompiled` to receive a precompiled Handlebars template.\n\n**Parameters:**\n\n* `filePath`: String path to the Handlebars template file.\n\n* `[options]`: Optional object containing any of the following properties:\n\n  * `[cache]`: Whether a cached template can be used if it have already been\n    requested. This is recommended for production to avoid necessary file I/O.\n\n  * `[precompiled=false]`: Whether a precompiled template should be provided,\n    instead of a compiled Handlebars template function.\n\n* `callback`: Function to call once the template is retrieved.\n\n#### `loadTemplates(dirPath, options|callback, [callback])`\n\nRetrieves the all the templates in the specified `dirPath` and passes an object\nmapping the compiled templates in the form `{filename: template}` to the\n`callback`.\n\nUse `options.precompiled` to receive precompiled Handlebars templates — this is\nuseful for sharing templates with client code.\n\n**Parameters:**\n\n* `dirPath`: String path to the directory containing Handlebars template files.\n\n* `[options]`: Optional object containing any of the following properties:\n\n  * `[cache]`: Whether cached templates can be used if it have already been\n    requested. This is recommended for production to avoid necessary file I/O.\n\n  * `[precompiled=false]`: Whether precompiled templates should be provided,\n    instead of a compiled Handlebars template function.\n\n* `callback`: Function to call once the templates are retrieved.\n\n#### `render(filePath, options|callback, [callback])`\n\nRenders the template at the specified `filePath` using this instance's `helpers`\nand partials, and passes the resulting string to the `callback`.\n\nThe `options` will be used both as the context in which the Handlebars template\nis rendered, and to signal this view engine on how it should behave, e.g.,\n`options.cache = false` will load _always_ load the templates from disk.\n\n**Parameters:**\n\n* `filePath`: String path to the Handlebars template file.\n\n* `[options]`: Optional object which will serve as the context in which the\n  Handlebars template is rendered. It may also contain any of the following\n  properties which affect this view engine's behavior:\n\n  * `[cache]`: Whether a cached template can be used if it have already been\n    requested. This is recommended for production to avoid unnecessary file I/O.\n\n  * `[helpers]`: Render-level helpers should be merged with (and will override)\n    instance and global helper functions.\n\n* `callback`: Function to call once the template is retrieved.\n\n#### `renderView(viewPath, options|callback, [callback])`\n\nRenders the template at the specified `viewPath` as the `{{{body}}}` within the\nlayout specified by the `defaultLayout` or `options.layout`. Rendering will use\nthis instance's `helpers` and partials, and passes the resulting string to the\n`callback`.\n\nThis method is called by Express and is the main entry point into this Express\nview engine implementation. It adds the concept of a \"layout\" and delegates\nrendering to the `render()` method.\n\nThe `options` will be used both as the context in which the Handlebars templates\nare rendered, and to signal this view engine on how it should behave, e.g.,\n`options.cache=false` will load _always_ load the templates from disk.\n\n**Parameters:**\n\n* `viewPath`: String path to the Handlebars template file which should serve as\n  the `{{{body}}}` when using a layout.\n\n* `[options]`: Optional object which will serve as the context in which the\n  Handlebars templates are rendered. It may also contain any of the following\n  properties which affect this view engine's behavior:\n\n  * `[cache]`: Whether cached templates can be used if they have already been\n    requested. This is recommended for production to avoid unnecessary file I/O.\n\n  * `[helpers]`: Render-level helpers should be merged with (and will override)\n    instance and global helper functions.\n\n  * `[layout]`: Optional string path to the Handlebars template file to be used\n    as the \"layout\". This overrides any `defaultLayout` value. Passing a falsy\n    value will render with no layout (even if a `defaultLayout` is defined).\n\n* `callback`: Function to call once the template is retrieved.\n\n### Statics\n\nThe following is the list of static API properties and methods provided on the\n`ExpressHandlebars` constructor:\n\n#### `getHandlebarsSemver(handlebars)`\n\nReturns a semver-compatible version string for the specified `handlebars`\nmodule/implementation.\n\nThis utility function is used to compute the value for an `ExpressHandlebars`\ninstance's `handlebarsVersion` property.\n\n\n[Handlebars bug]: https://github.com/wycats/handlebars.js/pull/389\n\n\nExamples\n--------\n\n### [Basic Usage][]\n\nThis example shows the most basic way to use this view engine.\n\n### [Advanced Usage][]\n\nThis example is more comprehensive and shows how to use many of the features of\nthis view engine, including helpers, partials, multiple layouts, etc.\n\nAs noted in the **Package Design** section, this view engine's implementation is\ninstance-based, and more advanced usages can take advantage of this. The\nAdvanced Usage example demonstrates how to use an `ExpressHandlebars` instance\nto share templates with the client, among other features.\n\n\n[Basic Usage]: https://github.com/ericf/express3-handlebars/tree/master/examples/basic\n[Advanced Usage]: https://github.com/ericf/express3-handlebars/tree/master/examples/advanced\n\n\nLicense\n-------\n\nThis software is free to use under the Yahoo! Inc. BSD license.\nSee the [LICENSE file][] for license text and copyright information.\n\n\n[LICENSE file]: https://github.com/ericf/express3-handlebars/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "_id": "express3-handlebars@0.5.0",
  "dist": {
    "shasum": "7f77fef9838cefad967ce18e75fd092fb4c313c2"
  },
  "_from": "express3-handlebars@",
  "_resolved": "https://registry.npmjs.org/express3-handlebars/-/express3-handlebars-0.5.0.tgz"
}
